# controller_frequency: 5
# base_local_planner: teb_local_planner/TebLocalPlannerROS
# base_global_planner: global_planner/GlobalPlanner
# use_sim_time: false
 
# # GlobalPlanner:
# #   allow_unknown: true
# #   default_tolerance: 0.0
# #   visualize_potential: false
# #   use_dijkstra: true   # If true, use dijkstra's algorithm. Otherwise, A*.
# #   use_quadratic: true #   If true, use the quadratic approximation of the potential. Otherwise, use a simpler calculation.
 
# #   use_grid_path: false #   If true, create a path that follows the grid boundaries. Otherwise, use a gradient descent method.
# #   old_navfn_behavior: false
# #   lethal_cost: 253
# #   neutral_cost: 50
# #   cost_factor: 3
# #   publish_potential: true
# #   orientation_mode: 0 #     How to set the orientation of each point (None=0, Forward=1, Interpolate=2, ForwardThenInterpolate=3, Backward=4, Leftward=5, Rightward=6)
# #   orientation_window_size: 1
# #   outline_map: true

# TebLocalPlannerROS:
#  use_sim_time: false
#  odom_topic: /lio_sam/mapping/odometry
#  map_frame: odom
    
#  # Trajectory
  
#  teb_autosize: True
#  dt_ref: 0.3
#  dt_hysteresis: 0.1
#  global_plan_overwrite_orientation: True
#  max_global_plan_lookahead_dist: 3.0
#  feasibility_check_no_poses: 5
    
#  # Robot
         
#  max_vel_x: 0.2
#  max_vel_x_backwards: 0.1
#  max_vel_theta: 1.5
#  acc_lim_x: 0.45
#  acc_lim_theta: 0.5
#  min_turning_radius: 0.0
#  footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
#    type: "polygon"
#    radius: 0.2 # for type "circular"
#    line_start: [-0.3, 0.0] # for type "line"
#    line_end: [0.3, 0.0] # for type "line"
#    front_offset: 0.2 # for type "two_circles"
#    front_radius: 0.2 # for type "two_circles"
#    rear_offset: 0.2 # for type "two_circles"
#    rear_radius: 0.2 # for type "two_circles"
#    vertices: [[-0.15, -0.125], [-0.15, 0.125], [0.15, 0.125], [0.15, -0.125]] # for type "polygon"

#  # GoalTolerance
    
#  xy_goal_tolerance: 0.2
#  yaw_goal_tolerance: 0.1
#  free_goal_vel: False
    
#  # Obstacles
    
#  min_obstacle_dist: 0.45
#  include_costmap_obstacles: True
#  costmap_obstacles_behind_robot_dist: 1.0
#  obstacle_poses_affected: 30
#  costmap_converter_plugin: ""
#  costmap_converter_spin_thread: True
#  costmap_converter_rate: 5

#  # Optimization
    
#  no_inner_iterations: 5
#  no_outer_iterations: 4
#  optimization_activate: True
#  optimization_verbose: False
#  penalty_epsilon: 0.05
#  weight_max_vel_x: 2
#  weight_max_vel_theta: 1
#  weight_acc_lim_x: 1
#  weight_acc_lim_theta: 1
#  weight_kinematics_nh: 1000
#  weight_kinematics_forward_drive: 1
#  weight_kinematics_turning_radius: 0
#  weight_optimaltime: 1
#  weight_obstacle: 50
#  weight_dynamic_obstacle: 10 # not in use yet
#  selection_alternative_time_cost: False # not in use yet

#  # Homotopy Class Planner

#  enable_homotopy_class_planning: True
#  enable_multithreading: True
#  simple_exploration: False
#  max_number_classes: 4
#  roadmap_graph_no_samples: 15
#  roadmap_graph_area_width: 5
#  h_signature_prescaler: 0.5
#  h_signature_threshold: 0.1
#  obstacle_keypoint_offset: 0.1
#  obstacle_heading_threshold: 0.45
#  visualize_hc_graph: False
 
###########################################################################
# TEB

# controller_frequency: 10
# base_local_planner: teb_local_planner/TebLocalPlannerROS
# base_global_planner: global_planner/GlobalPlanner
# use_sim_time: false
 
# TebLocalPlannerROS:
 
#   odom_topic: /lio_sam/mapping/odometry # /zedm/zed_node/odom 
#   map_frame: map
 
#   # Trajectory
 
#   teb_autosize: true
#   dt_ref: 0.3
#   dt_hysteresis: 0.03
#   global_plan_overwrite_orientation: true
#   max_global_plan_lookahead_dist: 3.0
#   feasibility_check_no_poses: 5
 
#   # Robot
 
#   max_vel_x: 0.5
#   max_vel_x_backwards: 0.5
#   max_vel_theta: 1.0
#   acc_lim_x: 0.1
#   acc_lim_theta: 0.1
#   min_turning_radius: 0.0
#   wheelbase: 0.75 
#   footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
#     type: "circular"
#     radius: 0.3 # for type "circular"
#     line_start: [ -0.3, 0.0 ] # for type "line"
#     line_end: [ 0.3, 0.0 ] # for type "line"
#     front_offset: 0.2 # for type "two_circles"
#     front_radius: 0.2 # for type "two_circles"
#     rear_offset: 0.2 # for type "two_circles"
#     rear_radius: 0.2 # for type "two_circles"
#     vertices: [ [ 2.0, 1.0 ], [ -2.0, 1.0 ],  [ -2.0, -1.0 ], [ 2.0, -1.0 ] ] # for type "polygon"
 
#   # GoalTolerance
 
#   xy_goal_tolerance: 0.5
#   yaw_goal_tolerance: 0.3
#   free_goal_vel: false
 
#   # Obstacles
 
#   min_obstacle_dist: 0.5
#   include_costmap_obstacles: true
#   costmap_obstacles_behind_robot_dist: 1.0
#   obstacle_poses_affected: 30
#   costmap_converter_plugin: ""
#   costmap_converter_spin_thread: true
#   costmap_converter_rate: 5
 
#   # Optimization
 
#   no_inner_iterations: 5
#   no_outer_iterations: 4
#   optimization_activate: true
#   optimization_verbose: false
#   penalty_epsilon: 0.05
#   weight_max_vel_x: 1000
#   weight_max_vel_theta: 1
#   weight_acc_lim_x: 0.1
#   weight_acc_lim_theta: 1
#   weight_kinematics_nh: 1000
#   weight_kinematics_forward_drive: 1000
#   weight_kinematics_turning_radius: 10000
#   weight_optimaltime: 1
#   weight_obstacle: 1000
#   weight_dynamic_obstacle: 10 # not in use yet
#   selection_alternative_time_cost: false # not in use yet
#   weight_adapt_factor: 10
#   weight_inflation: 0.1
 
#   # Homotopy Class Planner
 
#   enable_homotopy_class_planning: true
#   enable_multithreading: true
#   simple_exploration: false
#   max_number_classes: 4
#   roadmap_graph_no_samples: 15
#   roadmap_graph_area_width: 5
#   h_signature_prescaler: 0.5
#   h_signature_threshold: 0.1
#   obstacle_keypoint_offset: 0.1
#   obstacle_heading_threshold: 0.45
#   visualize_hc_graph: false

############################################################################################
# DWA

base_local_planner : dwa_local_planner/DWAPlannerROS
robot_base_frame: base_link
global_frame: odom
controller_frequency: 10.0
controller_patience: 80.0
planner_frequency: 10.0
planner_patience: 80.0
shutdown_costmaps: true
oscillation_distance: 0.4
oscillation_timeout: 10.0
conservative_reset_dist: 0.1
cost_factor: 1.0
neutral_cost: 66
lethal_cost: 240

recovery_behaviour_enabled: true
recovery_behaviors: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}] 

DWAPlannerROS:
  acc_lim_x: 1.0 # 0.5
  acc_lim_trans: 1.0 # 0.5
  acc_lim_y: 0.0
  acc_lim_theta: 5.0 # 3.0

  max_vel_x: 1 # 0.5
  min_vel_x: -1 # -0.5
  max_vel_y: 0.0
  min_vel_y: 0.0

  max_vel_trans: 1 # 0.5
  min_vel_trans: 0.1
  max_vel_theta: 1 # 0.6
  min_vel_theta: 0.1
  trans_stopped_vel: 0.08
  theta_stopped_vel: 0.08
  yaw_goal_tolerance: 0.15
  xy_goal_tolerance: 0.15
  latch_xy_goal_tolerance: false

  sim_time: 2.5 # 2.5
  sim_granularity: 0.03 # 0.03
  angular_sim_granularity: 0.05 #0.05
  vx_samples: 3
  vy_samples: 0
  vtheta_samples: 3

  penalize_negative_x: false
  path_distance_bias: 50.0
  goal_distance_bias: 25.0
  occdist_scale: 0.06
  forward_point_distance: 0.6
  stop_time_buffer: 0.1
  scaling_speed: 0.2
  control_frequency: 10.0
  max_scaling_factor: 0.1

  oscillation_reset_dist: 0.1
  oscillation_reset_angle: 0.1

  prune_plan: true
  use_dwa: false


###################################################################################
# TPR
# controller_frequency: 5
 
# TrajectoryPlannerROS:
 
#  acc_lim_x  : 0.5
#  acc_lim_y  : 0
#  acc_lim_theta  : 0.3
 
 
#  max_vel_x  : 2.0
 
#     #The maximum forward velocity allowed for the base in meters/sec
 
#  min_vel_x  : 0.5
 
#     #The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome #friction.
 
#  max_vel_theta  : 0.2
 
#    #The maximum rotational velocity allowed for the base in radians/sec
 
#  min_vel_theta  : -0.2
 
#     #The minimum rotational velocity allowed for the base in radians/sec
 
#  min_in_place_vel_theta  : 0.4
 
#     #The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec
 
#  escape_vel  : -0.1
 
#     #Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting #to escape. New in navigation 1.3.1
 
#  holonomic_robot  : false
 
#     #Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no #strafing velocity commands will be issued.
 
# ###Goal Tolerance Parameters
 
#  yaw_goal_tolerance  : 0.05
 
#     #The tolerance in radians for the controller in yaw/rotation when achieving its goal
 
#  xy_goal_tolerance  : 0.10
 
#     #The tolerance in meters for the controller in the x & y distance when achieving a goal
 
#  latch_xy_goal_tolerance  : false
 
#     #If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so. - New in navigation 1.3.1
 
# ###Forward Simulation Parameters
 
#  sim_time  : 1.0
 
#     #The amount of time to forward-simulate trajectories in seconds
 
#  sim_granularity  : 0.025
 
#     #The step size, in meters, to take between points on a given trajectory
 
#  angular_sim_granularity  :  sim_granularity
 
#     #The step size, in radians, to take between angular samples on a given trajectory. - New in navigation 1.3.1
 
#  vx_samples : 20
 
#     #The number of samples to use when exploring the x velocity space
 
#  vtheta_samples : 40
 
#     #The number of samples to use when exploring the theta velocity space
 
 
# ###Trajectory Scoring Parameters
 
#  meter_scoring  : false
 
#     #Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. New in navigation 1.3.1
 
#  pdist_scale : 0.9
 
#     #The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
 
#  gdist_scale : 0.6
 
#     #The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
 
#  occdist_scale : 0.01
 
#     #The weighting for how much the controller should attempt to avoid obstacles
 
#  heading_lookahead : 0.325
 
#     #How far to look ahead in meters when scoring different in-place-rotation trajectories
 
#  heading_scoring  : false
 
#     #Whether to score based on the robot's heading to the path or its distance from the path
 
#  heading_scoring_timestep : 1.0
 
#     #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
 
#  dwa  : true
 
#     #Whether to use the Dynamic Window Approach (DWA  _ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.
 
#  publish_cost_grid_pc  : false
 
#     #Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the  cost_cloud topic. Each point cloud represents the cost #grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. New in navigation 1.4.0
 
 
# ###Oscillation Prevention Parameters
 
#  oscillation_reset_dist : 0.05
 
#     #How far the robot must travel in meters before oscillation flags are reset
 
# ###Global Plan Parameters
 
#  prune_plan  : true
 
#     #Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.e

#####################################################################################################
# DWA 
# base_local_planner : dwa_local_planner/DWAPlannerROS
# controller_frequency: 10.0
# robot_base_frame: base_link
# global_frame: map

# # Specific local planner parameters
# DWAPlannerROS:

#     #### base_local_planner::LocalPlannerLimits ###

#     # velocities
#     max_vel_trans: 0.5
#     min_vel_trans: 0.1
#     max_vel_theta: 0.6
#     min_vel_theta: 0.1

#     max_vel_x: 0.75
#     min_vel_x: -0.1

#     max_vel_y: 0.2
#     min_vel_y: -0.2

#     # accelerations
#     acc_limit_trans: 1 # 0.35
#     deacc_limit_trans: 1 # 0.5

#     acc_lim_x: 1 # 0.35
#     acc_lim_y: 1 # 0.35

#     acc_lim_th: 1 # 0.5

#     # Goal
#     xy_goal_tolerance: 0.1
#     yaw_goal_tolerance: 0.1

#     # When stopped?
#     trans_stopped_vel: 0.1
#     rot_stopped_vel: 0.1

#     # Prune the plan?
#     prune_plan: true

#     ### DWA SPECIFIC PARAMETERS ###

#     # Forward simulation parameters
#     sim_time: 2.5
#     sim_period: 0.1 # 10 hz

#     sim_granularity: 0.1
#     angular_sim_granularity: 0.1

#     vx_samples: 6
#     vy_samples: 6
#     vth_samples: 10

#     use_dwa: true

#     # Switching behavior
#     switch_goal_distance: 0.4
#     switch_plan_distance: 0.5
#     switch_yaw_error: 0.8

#     # Cost functions
#     align_align_scale: 3.0
#     align_plan_scale: 0.1
#     align_goal_scale: 0.0
#     align_obstacle_scale: 0.1

#     default_align_scale: 1.0
#     default_plan_scale: 0.0
#     default_goal_scale: 1.0
#     default_obstacle_scale: 0.03

#     arrive_align_scale: 2.0
#     arrive_plan_scale: 0.0
#     arrive_goal_scale: 1.0
#     arrive_obstacle_scale: 0.01

#     align_cmd_px:  0.0
#     align_cmd_nx:  0.0
#     align_cmd_py:  0.0
#     align_cmd_ny:  0.0
#     align_cmd_pth: 0.0
#     align_cmd_nth: 0.0

#     default_cmd_px:  0.0
#     default_cmd_nx:  100.0
#     default_cmd_py:  50.0
#     default_cmd_ny:  50.0
#     default_cmd_pth: 0.0
#     default_cmd_nth: 0.0

#     arrive_cmd_px:  0.0
#     arrive_cmd_nx:  0.0
#     arrive_cmd_py:  0.0
#     arrive_cmd_ny:  0.0
#     arrive_cmd_pth: 0.0
#     arrive_cmd_nth: 0.0
